package com.yy.common.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

/**
 * base64 与 file 之间的相互转化 实现形式, 懒汉式的单例模式
 */
public class Base64UploadClass {
	// 私有化构造器
	private Base64UploadClass() {
	}

	// 事先定义一个变量存放该类的实例
	private static Base64UploadClass fileBase64 = null;

	// 对外暴露一个静态方法获取该类的实例
	public static Base64UploadClass getFileBase64() {
		if (fileBase64 == null) {
			fileBase64 = new Base64UploadClass();
		}
		return fileBase64;
	}

	// 将 file 转化为 Base64
	public String fileToBase64(File file) {
		FileInputStream inputFile;
		try {
			inputFile = new FileInputStream(file);
			byte[] buffer = new byte[(int) file.length()];
			inputFile.read(buffer);
			inputFile.close();
			return new BASE64Encoder().encode(buffer);
		} catch (Exception e) {
			throw new RuntimeException("文件路径无效\n" + e.getMessage());
		}
	}

	// 将 base64 转化为 file
	public boolean base64ToFile(String base64, String path) {
		byte[] buffer;
		try {
			buffer = new BASE64Decoder().decodeBuffer(base64);
			FileOutputStream out = new FileOutputStream(path);
			out.write(buffer);
			out.close();
			return true;
		} catch (Exception e) {
			throw new RuntimeException("base64字符串异常或地址异常\n" + e.getMessage());
		}
	}

	// 将 base64 转化为字节数组
	public byte[] base64ToByte(String base64) {
		BASE64Decoder decode = new BASE64Decoder();
		byte[] b = null;
		try {
			b = decode.decodeBuffer(base64);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return b;
	}

	// 将 字节数组转为base64
	public String byteTobase64(byte[] b) {
		BASE64Encoder encoder = new BASE64Encoder();
		String base64 = encoder.encode(b);
		return base64;
	}
}