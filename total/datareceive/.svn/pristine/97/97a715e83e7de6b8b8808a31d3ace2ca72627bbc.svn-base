package com.yy.common.utils;

import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;

public class MapTools {

	/**
	 * 判断点是否在多边形内
	 * 
	 * @param point 检测点
	 * @param pts   多边形的顶点
	 * @return 点在多边形内返回true,否则返回false
	 */
	public static boolean IsPtInPoly(Point2D.Double point, List<Point2D.Double> pts) {

		int N = pts.size();
		boolean boundOrVertex = true; // 如果点位于多边形的顶点或边上，也算做点在多边形内，直接返回true
		int intersectCount = 0;// cross points count of x
		double precision = 2e-10; // 浮点类型计算时候与0比较时候的容差
		Point2D.Double p1, p2;// neighbour bound vertices
		Point2D.Double p = point; // 当前点

		p1 = pts.get(0);// left vertex
		for (int i = 1; i <= N; ++i) {// check all rays
			if (p.equals(p1)) {
				return boundOrVertex;// p is an vertex
			}

			p2 = pts.get(i % N);// right vertex
			if (p.x < Math.min(p1.x, p2.x) || p.x > Math.max(p1.x, p2.x)) {// ray

				p1 = p2;
				continue;// next ray left point
			}

			if (p.x > Math.min(p1.x, p2.x) && p.x < Math.max(p1.x, p2.x)) {// ray
				if (p.y <= Math.max(p1.y, p2.y)) {// x is before of ray
					if (p1.x == p2.x && p.y >= Math.min(p1.y, p2.y)) {// overlies
						return boundOrVertex;
					}

					if (p1.y == p2.y) {// ray is vertical
						if (p1.y == p.y) {// overlies on a vertical ray
							return boundOrVertex;
						} else {// before ray
							++intersectCount;
						}
					} else {// cross point on the left side
						double xinters = (p.x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x) + p1.y;// cross point of y
						if (Math.abs(p.y - xinters) < precision) {// overlies
							// on a ray
							return boundOrVertex;
						}

						if (p.y < xinters) {// before ray
							++intersectCount;
						}
					}
				}
			} else {// special case when ray is crossing through the vertex
				if (p.x == p2.x && p.y <= p2.y) {// p crossing over p2
					Point2D.Double p3 = pts.get((i + 1) % N); // next vertex
					if (p.x >= Math.min(p1.x, p3.x) && p.x <= Math.max(p1.x, p3.x)) {// p.x lies
						// between p1.x
						// & p3.x
						++intersectCount;
					} else {
						intersectCount += 2;
					}
				}
			}
			p1 = p2;// next ray left point
		}

		if (intersectCount % 2 == 0) {// 偶数在多边形外
			return false;
		} else { // 奇数在多边形内
			return true;
		}

	}

	// 测试一个点是否在多边形内
	public static void main(String[] args) {

		Point2D.Double point = new Point2D.Double(116.366298, 40.899179);

		List<Point2D.Double> pts = new ArrayList<Point2D.Double>();
		pts.add(new Point2D.Double(116.169465, 39.932670));
		pts.add(new Point2D.Double(116.160260, 39.924492));
		pts.add(new Point2D.Double(116.186138, 39.879817));
		pts.add(new Point2D.Double(116.150625, 39.710019));
		pts.add(new Point2D.Double(116.183198, 39.709920));
		pts.add(new Point2D.Double(116.226950, 39.777616));
		pts.add(new Point2D.Double(116.421078, 39.810771));
		pts.add(new Point2D.Double(116.442621, 39.799892));
		pts.add(new Point2D.Double(116.463478, 39.790066));
		pts.add(new Point2D.Double(116.588276, 39.809551));
		pts.add(new Point2D.Double(116.536091, 39.808859));
		pts.add(new Point2D.Double(116.573856, 39.839643));
		pts.add(new Point2D.Double(116.706380, 39.916740));
		pts.add(new Point2D.Double(116.657285, 39.934545));
		pts.add(new Point2D.Double(116.600293, 39.937770));
		pts.add(new Point2D.Double(116.540039, 39.937968));
		pts.add(new Point2D.Double(116.514805, 39.982375));
		pts.add(new Point2D.Double(116.499935, 40.013710));
		pts.add(new Point2D.Double(116.546520, 40.030443));
		pts.add(new Point2D.Double(116.687668, 40.129961));
		pts.add(new Point2D.Double(116.539697, 40.080659));
		pts.add(new Point2D.Double(116.503390, 40.058474));
		pts.add(new Point2D.Double(116.468800, 40.052578));

		if (IsPtInPoly(point, pts)) {
			System.out.println("点在多边形内");
		} else {
			System.out.println("点在多边形外");
		}
	}
}
